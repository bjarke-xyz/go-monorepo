// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type Image struct {
	Src  string `json:"src"`
	Type string `json:"type"`
	Size int    `json:"size"`
	Name string `json:"name"`
}

type RecipeIngredientsInput struct {
	Original string   `json:"original"`
	ID       *int     `json:"id"`
	Title    *string  `json:"title"`
	Volume   *float64 `json:"volume"`
	Unit     *string  `json:"unit"`
	Meta     []string `json:"meta"`
}

type RecipeInput struct {
	Title       string              `json:"title"`
	Description *string             `json:"description"`
	Image       *graphql.Upload     `json:"image"`
	Published   bool                `json:"published"`
	Tips        []string            `json:"tips"`
	Yield       *string             `json:"yield"`
	Parts       []*RecipePartsInput `json:"parts"`
}

type RecipePartsInput struct {
	Title       string                    `json:"title"`
	Ingredients []*RecipeIngredientsInput `json:"ingredients"`
	Steps       []string                  `json:"steps"`
}

type Token struct {
	Token string `json:"token"`
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
	RoleAnon  Role = "ANON"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
	RoleAnon,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser, RoleAnon:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
