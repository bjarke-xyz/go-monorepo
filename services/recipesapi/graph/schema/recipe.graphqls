scalar Time
scalar Upload

extend type Query {
  recipes: [Recipe!]!
  recipe(id: ID!): Recipe
  recipeByTitle(title: String!): Recipe
}

extend type Mutation {
  createRecipe(input: RecipeInput!): Recipe!
  updateRecipe(id: ID!, input: RecipeInput!): Recipe!
}

type Image {
  src: String!
  type: String!
  size: Int!
  name: String!
}

type RecipeIngredients {
  original: String!
  id: Int
  title: String
  volume: Float
  unit: String
  meta: [String!]!
}
type RecipeParts {
  title: String!
  ingredients: [RecipeIngredients]
  steps: [String!]!
}
type Recipe {
  id: ID!
  title: String!
  description: String
  image: Image
  user: User!
  createdDateTime: Time!
  moderatedDateTime:Time  
  lastModifiedDateTime: Time!
  published: Boolean!
  tips: [String!]!
  yield: String
  parts: [RecipeParts!]!
}

input RecipeIngredientsInput {
  original: String!
  id: Int
  title: String
  volume: Float
  unit: String
  meta: [String!]!
}
input RecipePartsInput {
  title: String!
  ingredients: [RecipeIngredientsInput]
  steps: [String!]!
}
input RecipeInput {
  title: String!
  description: String
  image: Upload
  published: Boolean!
  tips: [String!]
  yield: String
  parts: [RecipePartsInput!]
}